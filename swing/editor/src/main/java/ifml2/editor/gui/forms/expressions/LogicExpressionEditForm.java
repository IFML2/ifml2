package ifml2.editor.gui.forms.expressions;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ifml2.vm.values.BooleanValue;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LogicExpressionEditForm extends ExpressionEditForm {
    private JPanel contentPane;
    private JRadioButton logicRadioButton;
    private JRadioButton expressionRadioButton;
    private JRadioButton yesRadioButton;
    private JRadioButton noRadioButton;
    private JTextArea expressionTextArea;
    private String logicLiteralRegEx = "([Дд][Аа]|[Нн][Ее][Тт])";
    private Pattern pattern = Pattern.compile(logicLiteralRegEx);

    public LogicExpressionEditForm(String expression) {
        super(expression);
        setContentPane(contentPane);

        logicRadioButton.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                final boolean toEnable = e.getStateChange() == ItemEvent.SELECTED;
                yesRadioButton.setEnabled(toEnable);
                noRadioButton.setEnabled(toEnable);
            }
        });
        expressionRadioButton.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                expressionTextArea.setEnabled(e.getStateChange() == ItemEvent.SELECTED);
            }
        });

        bindData();
    }

    @Override
    protected void bindData() {
        expressionTextArea.setText(expression);

        if (expression == null || pattern.matcher(expression).matches()) {
            Boolean logic = expression != null ? extractLogic(expression) : false;

            if (logic) {
                yesRadioButton.setSelected(true);
            } else {
                noRadioButton.setSelected(true);
            }

            logicRadioButton.setSelected(true);
        } else {
            expressionRadioButton.setSelected(true);
        }
    }

    private Boolean extractLogic(String expression) {
        Matcher matcher = pattern.matcher(expression);
        return matcher.matches() && BooleanValue.TRUE.equalsIgnoreCase(matcher.group(1));
    }

    @Override
    public String getEditedExpression() {
        return logicRadioButton.isSelected() ? createLiteral(yesRadioButton.isSelected()) : expressionTextArea.getText();
    }

    private String createLiteral(boolean logic) {
        return logic ? BooleanValue.TRUE : BooleanValue.FALSE;
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 2, new Insets(4, 4, 4, 4), -1, -1));
        logicRadioButton = new JRadioButton();
        logicRadioButton.setText("Значение:");
        contentPane.add(logicRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        expressionRadioButton = new JRadioButton();
        expressionRadioButton.setText("Выражение:");
        contentPane.add(expressionRadioButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        yesRadioButton = new JRadioButton();
        yesRadioButton.setEnabled(false);
        yesRadioButton.setText("Да");
        panel1.add(yesRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        noRadioButton = new JRadioButton();
        noRadioButton.setEnabled(false);
        noRadioButton.setText("Нет");
        panel1.add(noRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        expressionTextArea = new JTextArea();
        expressionTextArea.setEnabled(false);
        scrollPane1.setViewportView(expressionTextArea);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(logicRadioButton);
        buttonGroup.add(expressionRadioButton);
        buttonGroup = new ButtonGroup();
        buttonGroup.add(yesRadioButton);
        buttonGroup.add(noRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
